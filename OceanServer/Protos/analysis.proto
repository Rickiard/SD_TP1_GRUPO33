syntax = "proto3";

option csharp_namespace = "RPC_DataAnalyserService";

package analysis;

// The data analysis service definition
service DataAnalysisService {
  // Perform statistical analysis on sensor data
  rpc AnalyzeData (AnalysisRequest) returns (AnalysisResponse);
  
  // Detect patterns in sensor data
  rpc DetectPatterns (PatternDetectionRequest) returns (PatternDetectionResponse);
}

// Request message for data analysis
message AnalysisRequest {
  repeated SensorData data_points = 1;
  string analysis_type = 2;  // e.g., "wave", "wind", "temperature", "all"
  string time_range = 3;     // e.g., "1h", "1d", "1w"
  string location = 4;       // Location filter, if any
}

// Response message for data analysis
message AnalysisResponse {
  map<string, double> statistics = 1;  
  map<string, WaveStatistics> wave_stats = 2;
  map<string, WindStatistics> wind_stats = 3; 
  map<string, TemperatureStatistics> temp_stats = 4;
  bool success = 5;
  string error_message = 6;
}

// Wave statistics
message WaveStatistics {
  double avg_height = 1;
  double max_height = 2;
  double min_height = 3;
  double avg_period = 4;
  double max_period = 5;
  double min_period = 6;
  double avg_direction = 7;
  string predominant_direction = 8;
  double median_height = 9;
  double median_period = 10;
  double significant_wave_height = 11;  // H1/3 - média do terço superior das alturas
}

// Wind statistics
message WindStatistics {
  double avg_speed = 1;
  double max_speed = 2;
  double min_speed = 3;
  double avg_gust = 4;
  double max_gust = 5;
  double avg_direction = 6;
  string predominant_direction = 7;
  double median_speed = 8;
  double speed_std_dev = 9;
  double median_gust = 10;
  double gust_factor = 11;  // Razão entre rajada máxima e velocidade média
  map<string, double> beaufort_distribution = 12;  // Distribuição em escala de Beaufort
}

// Temperature statistics
message TemperatureStatistics {
  double avg_air_temp = 1;
  double max_air_temp = 2;
  double min_air_temp = 3;
  double avg_sea_temp = 4;
  double max_sea_temp = 5;
  double min_sea_temp = 6;
  double avg_humidity = 7;
  double median_air_temp = 8;
  double air_temp_std_dev = 9;
  double median_sea_temp = 10;
  double sea_temp_std_dev = 11;
  double max_humidity = 12;
  double min_humidity = 13;
  double avg_temp_difference = 14;  // Diferença média entre temperatura do ar e do mar
  double max_temp_difference = 15;  // Maior diferença de temperatura ar-mar
  double min_temp_difference = 16;  // Menor diferença de temperatura ar-mar
}

// Request message for pattern detection
message PatternDetectionRequest {
  repeated SensorData data_points = 1;
  string pattern_type = 2;  // e.g., "trend", "anomaly", "cycle", "storm"
  string data_field = 3;    // e.g., "wave_height", "wind_speed", "temperature"
  int32 window_size = 4;    // Time window size for pattern detection
}

// Response message for pattern detection
message PatternDetectionResponse {
  repeated Pattern patterns = 1;
  repeated StormEvent storm_events = 2;
  repeated AnomalyEvent anomalies = 3;
  bool success = 4;
  string error_message = 5;
}

// Ocean data message
message SensorData {
  string station_id = 1;
  double longitude = 2;
  double latitude = 3;
  string timestamp = 4;
  double atmosphere_mb = 5;
  double wind_direction_degrees = 6;
  double wind_speed_kn = 7;
  double gust_kn = 8;
  double wave_height_m = 9;
  double wave_period_s = 10;
  double mean_wave_direction_degrees = 11;
  double hmax_m = 12;
    double air_temperature_c = 13;
  double dew_point_c = 14;
  double sea_temperature_c = 15;
  double relative_humidity_percent = 16;
  int32 qc_flag = 17;             // Flag de controle de qualidade
  string sensor_id = 18;          // ID do sensor (mantido para compatibilidade)
  string data_source = 19;        // Fonte do dado (OceanServer, API externa, etc.)
}

// Pattern message
message Pattern {
  string type = 1;
  string description = 2;
  double confidence = 3;
  string start_time = 4;
  string end_time = 5;
  double intensity = 6;
  string location = 7;
}

// Storm event message
message StormEvent {
  string start_time = 1;
  string end_time = 2;
  double peak_wave_height = 3;
  double peak_wind_speed = 4;
  double peak_gust = 5;
  string location = 6;
  int32 severity = 7;  // 1-5 scale
  string description = 8;
}

// Anomaly event message
message AnomalyEvent {
  string timestamp = 1;
  string parameter = 2;  // which parameter shows anomaly
  double expected_value = 3;
  double actual_value = 4;
  double deviation_percent = 5;
  string location = 6;
  int32 confidence = 7;  // 1-100
}